"""
LifeLink AI - Health Report Analyzer
A GenAI-powered health report summarizer with multi-language support
Enhanced with PDF export and Text-to-Speech features
"""

import streamlit as st
import google.generativeai as genai
import pdfplumber
from io import BytesIO
import os
from fpdf import FPDF
from gtts import gTTS
import base64

# ========================================
# CONFIGURATION
# ========================================

# Insert your Gemini API key here
GEMINI_API_KEY = "AIzaSyDlqjHFgaXKrVrfseD5vlbIjCMUl9FVrlw"  # Replace with your actual API key

# Configure Gemini API
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash')
except Exception as e:
    st.error(f"API Configuration Error: {str(e)}")

# ========================================
# HELPER FUNCTIONS
# ========================================

def extract_text_from_pdf(pdf_file):
    """
    Extract text content from uploaded PDF file using pdfplumber
    """
    try:
        text = ""
        with pdfplumber.open(BytesIO(pdf_file.read())) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
        return text.strip()
    except Exception as e:
        raise Exception(f"Error extracting PDF text: {str(e)}")


def generate_health_summary(report_text, language):
    """
    Send extracted text to Gemini API and get health summary
    """
    language_instruction = ""
    if language != "English":
        language_instruction = f"\n\nIMPORTANT: Translate the entire summary into {language} language. Use simple, everyday {language} words that anyone can understand."
    
    prompt = f"""You are a helpful medical assistant for LifeLink AI, a health monitoring system.

Analyze the following health report and provide a clear, easy-to-understand summary for the patient.

Health Report:
{report_text}

Please provide:
1. **Key Findings**: Main health indicators and their values
2. **What This Means**: Explain in simple, non-technical language what these results indicate
3. **Recommendations**: Basic health advice based on the report (general wellness tips only, not medical prescriptions)
4. **Important Notes**: Any values that seem out of normal range (mark with ‚ö†Ô∏è if concerning)

Write in a friendly, reassuring tone. Avoid complex medical jargon. Use bullet points for clarity.{language_instruction}

Note: This is an AI-generated summary and should not replace professional medical advice."""

    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        raise Exception(f"Error generating summary: {str(e)}")


class PDF(FPDF):
    """Custom PDF class with header and footer"""
    
    def header(self):
        # Logo/Title
        self.set_font('Arial', 'B', 16)
        self.set_text_color(102, 126, 234)
        self.cell(0, 10, 'LifeLink AI - Health Report Summary', 0, 1, 'C')
        self.ln(5)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.set_text_color(128, 128, 128)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')


def create_pdf_summary(summary_text, language):
    """
    Create a PDF file from the health summary
    """
    try:
        pdf = PDF()
        pdf.add_page()
        pdf.set_auto_page_break(auto=True, margin=15)
        
        # Add metadata
        pdf.set_font('Arial', 'I', 10)
        pdf.set_text_color(100, 100, 100)
        pdf.cell(0, 8, f'Language: {language}', 0, 1)
        pdf.cell(0, 8, f'Generated by LifeLink AI', 0, 1)
        pdf.ln(5)
        
        # Add a line separator
        pdf.set_draw_color(102, 126, 234)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(8)
        
        # Add summary content
        pdf.set_font('Arial', '', 11)
        pdf.set_text_color(0, 0, 0)
        
        # Clean up markdown formatting for PDF
        clean_text = summary_text.replace('**', '').replace('*', '').replace('#', '')
        
        # Split text into lines and add to PDF
        lines = clean_text.split('\n')
        for line in lines:
            if line.strip():
                # Handle special characters and encoding
                try:
                    pdf.multi_cell(0, 6, line.encode('latin-1', 'replace').decode('latin-1'))
                except:
                    pdf.multi_cell(0, 6, line.encode('ascii', 'ignore').decode('ascii'))
            else:
                pdf.ln(3)
        
        # Add disclaimer
        pdf.ln(10)
        pdf.set_draw_color(102, 126, 234)
        pdf.line(10, pdf.get_y(), 200, pdf.get_y())
        pdf.ln(5)
        pdf.set_font('Arial', 'I', 9)
        pdf.set_text_color(200, 0, 0)
        pdf.multi_cell(0, 5, 'DISCLAIMER: This is an AI-generated summary and should not replace professional medical advice. Always consult with your healthcare provider for medical decisions.')
        
        # Output PDF to bytes
        pdf_output = pdf.output(dest='S').encode('latin-1')
        return BytesIO(pdf_output)
    
    except Exception as e:
        raise Exception(f"Error creating PDF: {str(e)}")


def text_to_speech(text, language):
    """
    Convert text to speech using gTTS
    """
    try:
        # Language mapping for gTTS
        lang_map = {
            "English": "en",
            "Hindi": "hi",
            "Marathi": "mr",
            "Kannada": "kn"
        }
        
        # Clean text for TTS (remove markdown and special characters)
        clean_text = text.replace('**', '').replace('*', '').replace('#', '')
        clean_text = clean_text.replace('‚ö†Ô∏è', 'Warning: ')
        
        # Generate speech
        tts = gTTS(text=clean_text, lang=lang_map.get(language, "en"), slow=False)
        
        # Save to BytesIO
        audio_bytes = BytesIO()
        tts.write_to_fp(audio_bytes)
        audio_bytes.seek(0)
        
        return audio_bytes
    
    except Exception as e:
        raise Exception(f"Error generating audio: {str(e)}")


# ========================================
# STREAMLIT UI
# ========================================

def main():
    # Page configuration
    st.set_page_config(
        page_title="LifeLink AI - Health Report Analyzer",
        page_icon="üè•",
        layout="centered"
    )
    
    # Header
    st.title("üè• LifeLink AI")
    st.subheader("Health Report Analyzer")
    st.markdown("Upload your health report PDF and get an easy-to-understand summary powered by AI")
    st.markdown("---")
    
    # Check if API key is configured
    if GEMINI_API_KEY == "YOUR_GEMINI_API_KEY_HERE":
        st.error("‚ö†Ô∏è Please configure your Gemini API key in the code before using this app.")
        st.info("Get your free API key from: https://makersuite.google.com/app/apikey")
        st.stop()
    
    # Language selection
    col1, col2 = st.columns([2, 1])
    with col1:
        uploaded_file = st.file_uploader(
            "Upload Health Report (PDF)",
            type=['pdf'],
            help="Upload your medical test report in PDF format"
        )
    with col2:
        language = st.selectbox(
            "Output Language",
            ["English", "Hindi", "Marathi", "Kannada"],
            help="Choose the language for your summary"
        )
    
    # Process button
    if uploaded_file is not None:
        st.success(f"‚úÖ File uploaded: {uploaded_file.name}")
        
        if st.button("üîç Analyze Report", type="primary", use_container_width=True):
            with st.spinner("Extracting text from PDF..."):
                try:
                    # Extract text from PDF
                    report_text = extract_text_from_pdf(uploaded_file)
                    
                    if not report_text or len(report_text) < 50:
                        st.error("‚ùå Could not extract sufficient text from the PDF. Please ensure the PDF contains readable text.")
                        st.stop()
                    
                    # Show extracted text in expander (for verification)
                    with st.expander("üìÑ View Extracted Text"):
                        st.text_area("Report Content", report_text, height=200)
                    
                except Exception as e:
                    st.error(f"‚ùå Error reading PDF: {str(e)}")
                    st.stop()
            
            with st.spinner(f"Generating {language} summary using Gemini AI..."):
                try:
                    # Generate summary using Gemini
                    summary = generate_health_summary(report_text, language)
                    
                    # Store in session state
                    st.session_state['summary'] = summary
                    st.session_state['language'] = language
                    
                except Exception as e:
                    st.error(f"‚ùå Error generating summary: {str(e)}")
                    st.info("Please check your API key and internet connection.")
                    st.stop()
    
    # Display summary if available
    if 'summary' in st.session_state:
        summary = st.session_state['summary']
        language = st.session_state['language']
        
        # Display summary
        st.markdown("---")
        st.markdown("## üìä Health Report Summary")
        st.markdown(summary)
        
        # Action buttons
        st.markdown("---")
        st.markdown("### üì• Download & Listen")
        
        col1, col2, col3 = st.columns(3)
        
        # Text download button
        with col1:
            st.download_button(
                label="üìÑ Download as Text",
                data=summary,
                file_name=f"health_summary_{language.lower()}.txt",
                mime="text/plain",
                use_container_width=True
            )
        
        # PDF download button
        with col2:
            try:
                pdf_bytes = create_pdf_summary(summary, language)
                st.download_button(
                    label="üìï Download as PDF",
                    data=pdf_bytes,
                    file_name=f"health_summary_{language.lower()}.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"PDF generation error: {str(e)}")
        
        # Audio generation button
        with col3:
            if st.button("üîä Read Aloud", use_container_width=True):
                with st.spinner("Generating audio..."):
                    try:
                        audio_bytes = text_to_speech(summary, language)
                        st.audio(audio_bytes, format='audio/mp3')
                        
                        # Option to download audio
                        st.download_button(
                            label="üíæ Download Audio",
                            data=audio_bytes,
                            file_name=f"health_summary_{language.lower()}.mp3",
                            mime="audio/mp3",
                            use_container_width=True
                        )
                    except Exception as e:
                        st.error(f"Audio generation error: {str(e)}")
                        st.info("Text-to-speech may not be available for all languages.")
    
    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666; font-size: 0.9em;'>
        <p>‚öïÔ∏è This is an AI-powered tool and should not replace professional medical advice.</p>
        <p>Always consult with your healthcare provider for medical decisions.</p>
        <p style='margin-top: 10px;'><strong>LifeLink AI</strong> | Powered by Google Gemini</p>
        </div>
        """,
        unsafe_allow_html=True
    )


if __name__ == "__main__":
    main()
